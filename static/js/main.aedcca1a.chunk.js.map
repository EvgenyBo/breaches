{"version":3,"sources":["components/ToggleTheme.js","components/BreachItem.js","App.js","serviceWorker.js","index.js"],"names":["ToggleTheme","preferredTheme","useMediaPredicate","useState","themeState","setThemeState","isFirstRun","useRef","getTheme","localStorage","getItem","useEffect","isDark","current","isInitialDark","setItem","document","body","classList","add","remove","className","onChange","checked","checkedIcon","color","uncheckedIcon","offColor","onColor","offHandleColor","onHandleColor","Spinner","BreachItem","BreachDate","Title","LogoPath","Description","onClick","isCollapsed","PwnCount","console","log","desc","replace","src","alt","style","diplay","isOpened","App","breaches","setBreaches","isFetching","setIsFetching","currBreaches","setCurrBreaches","collapsedIndex","setCollapsedIndex","retrieveBreaches","cIndex","JSON","parse","Number","fetchBreachesData","window","addEventListener","handleScroll","Math","ceil","innerHeight","documentElement","scrollTop","offsetHeight","offset","a","Axios","get","headers","result","data","total","items","length","stringify","fetchMoreBreachItems","BreachesList","map","breach","i","index","setCollapsed","key","Name","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aedcca1a.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport Switch from \"react-switch\";\nimport { FaSun, FaMoon } from \"react-icons/fa\";\n\nconst ToggleTheme = () => {\n  const preferredTheme = useMediaPredicate(\"(prefers-color-scheme: dark)\")\n    ? \"dark\"\n    : \"light\";\n  const [themeState, setThemeState] = useState(false);\n  const isFirstRun = useRef(true);\n  const getTheme = localStorage.getItem(\"Theme\");\n\n  const isInitialDark = () => {\n    const isDark =\n      getTheme === \"dark\" ||\n      (preferredTheme === \"dark\" && getTheme !== \"light\");\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return isDark;\n    }\n  };\n  useEffect(() => {\n    if (isInitialDark() || themeState) {\n      localStorage.setItem(\"Theme\", \"dark\");\n      document.body.classList.add(\"dark-mode\");\n      setThemeState(true);\n    } else {\n      localStorage.setItem(\"Theme\", \"light\");\n      document.body.classList.remove(\"dark-mode\");\n      setThemeState(false);\n    }\n  }, [preferredTheme, themeState]);\n\n  return (\n    <div className=\"header\">\n      <Switch\n        onChange={() => setThemeState(!themeState)}\n        checked={themeState}\n        checkedIcon={<FaMoon className={\"moon-icon\"} color={\"#F0C420\"} />}\n        uncheckedIcon={<FaSun className={\"sun-icon\"} color={\"#FFDF22\"} />}\n        offColor={\"#02CCFE\"}\n        onColor={\"#234E86\"}\n        offHandleColor={\"#fff\"}\n        onHandleColor={\"#363737\"}\n      />\n    </div>\n  );\n};\n\nexport default ToggleTheme;\n","import React from \"react\";\nimport { Collapse } from \"react-collapse\";\n\nexport const Spinner = () => (\n  <div>\n    <h5>Loading...</h5>\n  </div>\n);\n\nexport const BreachItem = ({\n  BreachDate,\n  Title,\n  LogoPath,\n  Description,\n  onClick,\n  isCollapsed,\n  PwnCount,\n}) => {\n  console.log(\"isCollapsed\", isCollapsed);\n  let desc = Description.replace(/&quot;/g, \"\");\n  return (\n    <div className={\"breach\"}>\n      <div onClick={onClick} className=\"breach-header\">\n        <div className={\"breach-body\"}>\n          <span className=\"breach-title\">{Title}</span>\n          <span className=\"breach-date\">Breach Date: {BreachDate}</span>\n        </div>\n        <div className={\"breach-img\"}>\n          <img className={\"breach-logo\"} src={LogoPath} alt=\"breach-img\" />\n        </div>\n      </div>\n      <div className={`breach-content ${!isCollapsed ? \"hidden\" : \"\"}`}>\n        <Collapse\n          style={{ diplay: isCollapsed ? \"\" : \"none\" }}\n          isOpened={isCollapsed}\n        >\n          <hr />\n          <span className=\"breach-pwned\">Pwned {PwnCount} times!</span>\n          <div className={\"breach-desc\"}>{`${desc.replace(\n            /<\\/?[^>]+(>|$)/g,\n            \"\"\n          )}`}</div>\n        </Collapse>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport ToggleTheme from \"components/ToggleTheme\";\nimport { BreachItem, Spinner } from \"components/BreachItem\";\nimport \"./App.scss\";\nimport Axios from \"axios\";\n\nconst App = () => {\n  const [breaches, setBreaches] = useState([]);\n  const [isFetching, setIsFetching] = useState(false);\n  const [currBreaches, setCurrBreaches] = useState(0);\n  const [collapsedIndex, setCollapsedIndex] = useState(null);\n\n  useEffect(() => {\n    let retrieveBreaches = localStorage.getItem(\"Breaches\");\n    let cIndex = localStorage.getItem(\"CollapsedIndex\");\n    if (retrieveBreaches) {\n      const { currBreaches, breaches } = JSON.parse(retrieveBreaches);\n      setBreaches(breaches);\n      setCollapsedIndex(cIndex ? Number(cIndex) : cIndex);\n      setCurrBreaches(currBreaches);\n    } else {\n      fetchBreachesData(currBreaches);\n    }\n    window.addEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const handleScroll = () => {\n    if (\n      Math.ceil(window.innerHeight + document.documentElement.scrollTop) !==\n        document.documentElement.offsetHeight ||\n      isFetching\n    ) {\n      return;\n    }\n    setIsFetching(true);\n  };\n\n  const fetchBreachesData = async (offset) => {\n    const result = await Axios.get(\n      `https://guard.io/v2/hiring/fe/breaches?offset=${offset}`,\n      {\n        headers: {\n          \"X-Best-Pokemon\": \"jigglypuff\",\n        },\n      }\n    );\n    const { total, items } = result.data;\n    setCurrBreaches(currBreaches + items.length);\n    setBreaches([...breaches, ...items]);\n    localStorage.setItem(\n      \"Breaches\",\n      JSON.stringify({\n        currBreaches: currBreaches + items.length,\n        breaches: [...breaches, ...items],\n      })\n    );\n  };\n\n  useEffect(() => {\n    if (!isFetching) return;\n    fetchMoreBreachItems();\n  }, [isFetching]);\n\n  const fetchMoreBreachItems = async () => {\n    fetchBreachesData(currBreaches);\n    setIsFetching(false);\n  };\n\n  const setCollapsed = (i) => {\n    const index = i !== collapsedIndex ? i : null;\n    setCollapsedIndex(i !== collapsedIndex ? i : null);\n    localStorage.setItem(\"CollapsedIndex\", index);\n  };\n\n  const BreachesList = () => {\n    return breaches.map((breach, i) => (\n      <BreachItem\n        onClick={() => setCollapsed(i)}\n        isCollapsed={i === collapsedIndex}\n        key={breach.Name}\n        {...breach}\n      />\n    ));\n  };\n\n  return (\n    <div className=\"app\">\n      <ToggleTheme />\n      <h2>Breaches Demo</h2>\n      <div className={\"breach-container\"}>\n        {breaches.length > 0 ? <BreachesList /> : <Spinner />}\n      </div>\n      {isFetching && <h1>Fetching more list items...</h1>}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}